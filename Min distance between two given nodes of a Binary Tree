Given a binary tree and two node values your task is to find the minimum distance between them.
The given two nodes are guaranteed to be in the binary tree and nodes are numbered from 1 to N.
Please Note that a and b are not always leaf node.

Example 1:

Input:
        1
      /  \
     2    3
a = 2, b = 3
Output: 2
Explanation: The tree formed is:
       1
     /   \ 
    2     3
We need the distance between 2 and 3.
Being at node 2, we need to take two
steps ahead in order to reach node 3.
The path followed will be:
2 -> 1 -> 3. Hence, the result is 2. 




class TreeNode:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key

def findLCA(root, a, b):
    if root is None:
        return None
    
    if root.val == a or root.val == b:
        return root
    
    left_LCA = findLCA(root.left, a, b)
    right_LCA = findLCA(root.right, a, b)
    
    if left_LCA and right_LCA:
        return root
    return left_LCA if left_LCA is not None else right_LCA

def findDistance(root, key, distance):
    if root is None:
        return -1
    
    if root.val == key:
        return distance
    
    left_distance = findDistance(root.left, key, distance + 1)
    if left_distance != -1:
        return left_distance
    
    right_distance = findDistance(root.right, key, distance + 1)
    return right_distance

def findMinDistance(root, a, b):
    lca = findLCA(root, a, b)
    distance_a = findDistance(lca, a, 0)
    distance_b = findDistance(lca, b, 0)
    
    return distance_a + distance_b

# Example usage
root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
a = 2
b = 3
result = findMinDistance(root, a, b)
print(result)
